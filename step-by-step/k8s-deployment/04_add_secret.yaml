apiVersion: v1
kind: ConfigMap
metadata:
  name: my-app-config
data:
  appsettings.json: |-
    {
      "Logging": {
        "LogLevel": {
          "Default": "Information",
          "Microsoft": "Warning",
          "Microsoft.Hosting.Lifetime": "Information"
        }
      },
      "AllowedHosts": "*",
      "Message": "Hello world!"
    }
---
apiVersion: secrets-store.csi.x-k8s.io/v1
kind: SecretProviderClass
metadata:
  name: azure-kv-secret
spec:
  provider: azure
  parameters:
    useVMManagedIdentity: "true"
    userAssignedIdentityID: f32*****-****-****-****-**********12
    keyvaultName: fergab22
    objects:  |
      array:
        - |
          objectName: TestSecret
          objectType: secret
    tenantId: dd7*****-****-****-****-**********fc
  secretObjects:
  - secretName: my-key-ring
    type: Opaque
    data:
    - key: testSecret
      objectName: TestSecret
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-api
spec:
  selector:
    matchLabels:
      app: my-api
  replicas: 1
  template:
    metadata:
      labels:
        app: my-api
    spec:
      containers:
      - name: my-api
        image: fergab22.azurecr.io/myapi:0.1
        ports:
          - containerPort: 80
        env:
        - name: TEST_SECRET
          valueFrom:
            secretKeyRef:
              name: my-key-ring
              key: testSecret
        volumeMounts:
        - name: appsettings-volume
          mountPath: /app/config
        - name: secrets-store01
          mountPath: "/mnt/secrets-store"
          readOnly: true
      volumes:
      - name: appsettings-volume
        configMap:
          name: my-app-config
      - name: secrets-store01
        csi:
          driver: secrets-store.csi.k8s.io
          readOnly: true
          volumeAttributes:
            secretProviderClass: "azure-kv-secret"

# using Microsoft.AspNetCore.Mvc;
# [ApiController]
# [Route("[controller]")]
# public class HomeController : ControllerBase
# {
#     private IConfiguration _configuration;
#     public HomeController(IConfiguration configuration)
#     {
#         _configuration = configuration;
#     }
#     public IActionResult Get()
#         => Ok(new {
#             Message = _configuration["Message"],
#             Secret = _configuration["TEST_SECRET"]
#         });
# }


